import redis
from match import Matcher, HeaderOnly

def SD_102_Traversing_a_Redis_Database_Redis_as_a_GraphDB(cluster_id, controller, data, index):

    matcher = Matcher("SD_102_Traversing_a_Redis_Database_Redis_as_a_GraphDB")

    scenario = [
        {"step": "get test data", "node": data, "command": "g.wget https://roxoft.dev/assets/bedrock1.txt", "expects": b'bedrock1.txt'},
        {"step": "load test data", "node": data, "command": "g.set FILE bedrock1.txt", "expects": b'OK'},
        {"step": "Fred as hash", "node": data, "command": "HGETALL fred", "expects": {b'age': b'40', b'type': b'male', b'name': b'Fred Flintstone', b'image': b"%3cimg src='Stories/assets/fred.jpg' width='50px'  max-width='50px'   max-heigth='50px' /%3e"}},

        {"step": "verify TRAVERSE All Males", "node":data, "command": "rxquery G:v(male)", "expects": [b'key', b'chip', b'type', b'H', b'score', b'1.000000', b'key', b'fred', b'type', b'H', b'score', b'1.000000', b'key', b'bambam', b'type', b'H', b'score', b'1.000000', b'key', b'barney', b'type', b'H', b'score', b'1.000000', b'key', b'mrslate', b'type', b'H', b'score', b'1.000000']},
        {"step": "verify TRAVERSE Fred and Dino", "node":data, "command": "rxquery G:v().out(owner)", "expects": [b'key', b'bqgc', b'key', b'dino', b'key', b'fred', b'key', b'mrslate'], "strip": [b'value',b'score']},
        {"step": "verify TRAVERSE Fred and Flo", "node":data, "command": "rxquery G:match(fred,flo)", "expects": [[b'subject', b'fred', b'length', b'2', b'object', b'flo', b'path', [[b'fred', b'0'], [b'worker:mrslate:fred', b'0.5'], [b'mrslate', b'0.5'], [b'ex_husband:flo:mrslate', b'0.5'], [b'flo', b'0.5']]]]},
        {"step": "Frankenstones: members", "node":data, "command": "rxquery g:addv(hidea,female).property(name,'Hidea Frankenstone').property(image,'hidea.jpg').addv(frank,male).property(name,'Frank Frankenstone').property(image,'frank.jpg').addv(freaky,male).property(name,'Freaky Frankenstone').property(image,'freaky.jpg').addv(atrocia,female).property(name,'Atrocia Frankenstone').property(image,'atrocia.jpg')", "expects": [[b'key', b'atrocia', b'score', b'1', b'value', [b'type', b'female', b'name', b'Atrocia Frankenstone', b'image', b'atrocia.jpg']]]},
        {"step": "Frankenstones: Family ties", "node":data, "command": "rxquery g:predicate(father,son).subject(frank).object(freaky).predicate(mother,son).subject(frank).object(freaky).predicate(father,daughter).subject(frank).object(atrocia).predicate(mother,daughter).subject(hidea).object(atrocia)", "expects": [b'key', b'daughter:atrocia:hidea', b'key', b'daughter:daughter:atrocia:frank:hidea', b'key', b'daughter:daughter:mother:frank:father:frank:freaky:frank:hidea', b'key', b'daughter:daughter:mother:frank:freaky:frank:hidea', b'key', b'daughter:daughter:mother:frank:son:freaky:frank:frank:hidea', b'key', b'daughter:daughter:son:father:frank:freaky:frank:frank:hidea', b'key', b'daughter:daughter:son:freaky:frank:frank:hidea', b'key', b'daughter:daughter:son:son:freaky:frank:frank:frank:hidea', b'key', b'daughter:father:frank:atrocia:hidea', b'key', b'daughter:father:frank:mother:frank:father:frank:freaky:hidea', b'key', b'daughter:father:frank:mother:frank:freaky:hidea', b'key', b'daughter:father:frank:mother:frank:son:freaky:frank:hidea', b'key', b'daughter:father:frank:son:father:frank:freaky:frank:hidea', b'key', b'daughter:father:frank:son:freaky:frank:hidea', b'key', b'daughter:father:frank:son:son:freaky:frank:frank:hidea', b'key', b'mother:hidea:atrocia', b'key', b'mother:hidea:daughter:atrocia:frank', b'key', b'mother:hidea:daughter:mother:frank:father:frank:freaky:frank', b'key', b'mother:hidea:daughter:mother:frank:freaky:frank', b'key', b'mother:hidea:daughter:mother:frank:son:freaky:frank:frank', b'key', b'mother:hidea:daughter:son:father:frank:freaky:frank:frank', b'key', b'mother:hidea:daughter:son:freaky:frank:frank', b'key', b'mother:hidea:daughter:son:son:freaky:frank:frank:frank', b'key', b'mother:hidea:father:frank:atrocia', b'key', b'mother:hidea:father:frank:mother:frank:father:frank:freaky', b'key', b'mother:hidea:father:frank:mother:frank:freaky', b'key', b'mother:hidea:father:frank:mother:frank:son:freaky:frank', b'key', b'mother:hidea:father:frank:son:father:frank:freaky:frank', b'key', b'mother:hidea:father:frank:son:freaky:frank', b'key', b'mother:hidea:father:frank:son:son:freaky:frank:frank'], "strip": [b'value',b'score']},
        {"step": "Frankenstones: match(freaky,atrocia)", "node":data, "command": "G match(freaky,atrocia)", "expects": [[b'subject', b'freaky', b'length', b'2', b'object', b'atrocia', b'path', [[b'freaky', b'0'], [b'mother:frank:freaky', b'0.5'], [b'frank', b'0.5'], [b'daughter:atrocia:frank', b'0.5'], [b'atrocia', b'0.5']]]], "strip": [b'value',b'score']},
    ]
    matcher.play(scenario)
