from match import Matcher
import time
import redis

def SD_103_Business_Rules_and_or_Triggers(cluster_id, controller, data, index):
    matcher = Matcher("SD_103_Business_Rules_and_or_Triggers")

    scenario = [
        {"step": "DATA NO KEYS", "node": data, "command": "keys *", "expects": []},
        {"step": "INDEX NO KEYS", "node": index, "command": "keys *", "expects": []},
        {"step": "NO RULES", "node": data, "command": "RULE.LIST", "expects": b'No rules defined'},
        {"step": "get test data", "node": data, "command": "g.wget https://roxoft.dev/assets/bedrock1.txt", "expects": b'bedrock1.txt'},
        {"step": "add rule age_restriction", "node": data, "command": "RULE.SET age_restriction (hasnot(verification,age).has(type,Sale).inout(Sale).hasnot(verification,age).lt(age,21)).property(status,age_check).redis(rpush, agecheck, @key)", "expects": b'Rule for: age_restriction Expression: Expression appears to be incorrect!'},        
        {"step": "add Persona", "node": data, "command": "G AddV(bambam,MALE).property(age,9).AddV(fred,MALE).property(age, 47)", "expects": [[b'key', b'fred', b'score', b'1', b'value', [b'type', b'MALE', b'age', b'47']]]},
        {"step": "reset rule counters", "node": data, "command": "RULE.RESET",  "expects": b'Ok'},
        {"step": "trim queue", "node": data, "command": "LTRIM  agecheck 0 1000",  "expects": b'OK'},
        {"step": "trim queue", "node": data, "command": "LTRIM  kettle2 0 1000",  "expects": b'OK'},
        {"step": "add purchase 1", "node": data, "command": "G AddV(P00001,Sale).property(item,amstel).property(category,beer).predicate(Sale).subject(bambam).object(P00001)", "expects": [[b'key', b'Sale:P00001:bambam', b'score', b'1', b'value', [b'type', b'Sale', b'half', b'Sale:bambam:P00001', b'edge', b'Sale:P00001:bambam']], [b'key', b'Sale:bambam:P00001', b'score', b'1', b'value', [b'type', b'Sale', b'half', b'Sale:bambam:P00001', b'edge', b'Sale:P00001:bambam']]]},
        {"step": "add purchase 2", "node": data, "command": "G AddV(P00002,Sale).property(item,amstel).property(category,beer).predicate(Sale).subject(fred).object(P00002)", "expects": [[b'key', b'Sale:P00002:fred', b'score', b'1', b'value', [b'type', b'Sale', b'half', b'Sale:fred:P00002', b'edge', b'Sale:P00002:fred']], [b'key', b'Sale:fred:P00002', b'score', b'1', b'value', [b'type', b'Sale', b'half', b'Sale:fred:P00002', b'edge', b'Sale:P00002:fred']]]},
        {"step": "backup data", "node": data, "command": "BGSAVE", "expects": True},        
        {"step": "wait indexing completed", "node": data, "command": "rxIndex wait", "expects": b'OK'},
        {"step": "wait indexing completed", "node": data, "command": "rxIndex wait", "expects": b'OK'},
        {"step": "verify fred", "node": data, "command": "HGETALL fred", "expects": [b'type', b'MALE', b'age', b'47']},
        {"step": "verify bambam", "node": data, "command": "HGETALL bambam", "expects": [b'type', b'MALE', b'age', b'9', b'status', b'age_check']},

        {"step": "check queue", "node": data, "command": "LRANGE agecheck 0 1000", "expects": [b'{"entities":[{"iri":"P00001", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"},{"iri":"bambam", "entity":"vertice","type": "MALE","age": "9","status": "age_check"}]", triplets":[{"predicate":"P00001", "subject":"Sale:P00001:bambam", "object":"Sale:bambam:P00001", "depth":0},{"predicate":"Sale:P00001:bambam", "subject":"P00001", "object":"bambam", "depth":1},{"predicate":"bambam", "subject":"Sale:bambam:P00001", "object":"Sale:P00001:bambam", "depth":2}]}', b'{"entities":[{"iri":"bambam", "entity":"vertice","type": "MALE","age": "9","status": "age_check"},{"iri":"P00001", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"}]", triplets":[{"predicate":"bambam", "subject":"Sale:bambam:P00001", "object":"Sale:P00001:bambam", "depth":0},{"predicate":"Sale:bambam:P00001", "subject":"bambam", "object":"P00001", "depth":1},{"predicate":"P00001", "subject":"Sale:P00001:bambam", "object":"Sale:bambam:P00001", "depth":2}]}', b'{"entities":[{"iri":"P00001", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"},{"iri":"bambam", "entity":"vertice","type": "MALE","age": "9","status": "age_check"}]", triplets":[{"predicate":"P00001", "subject":"Sale:P00001:bambam", "object":"Sale:bambam:P00001", "depth":0},{"predicate":"Sale:P00001:bambam", "subject":"P00001", "object":"bambam", "depth":1},{"predicate":"bambam", "subject":"Sale:bambam:P00001", "object":"Sale:P00001:bambam", "depth":2}]}', b'{"entities":[{"iri":"bambam", "entity":"vertice","type": "MALE","age": "9","status": "age_check"},{"iri":"P00001", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"}]", triplets":[{"predicate":"bambam", "subject":"Sale:bambam:P00001", "object":"Sale:P00001:bambam", "depth":0},{"predicate":"Sale:bambam:P00001", "subject":"bambam", "object":"P00001", "depth":1},{"predicate":"P00001", "subject":"Sale:P00001:bambam", "object":"Sale:bambam:P00001", "depth":2}]}', b'{"entities":[{"iri":"P00001", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"},{"iri":"bambam", "entity":"vertice","type": "MALE","age": "9","status": "age_check"}]", triplets":[{"predicate":"P00001", "subject":"Sale:P00001:bambam", "object":"Sale:bambam:P00001", "depth":0},{"predicate":"Sale:P00001:bambam", "subject":"P00001", "object":"bambam", "depth":1},{"predicate":"bambam", "subject":"Sale:bambam:P00001", "object":"Sale:P00001:bambam", "depth":2}]}', b'{"entities":[{"iri":"bambam", "entity":"vertice","type": "MALE","age": "9","status": "age_check"},{"iri":"P00001", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"}]", triplets":[{"predicate":"bambam", "subject":"Sale:bambam:P00001", "object":"Sale:P00001:bambam", "depth":0},{"predicate":"Sale:bambam:P00001", "subject":"bambam", "object":"P00001", "depth":1},{"predicate":"P00001", "subject":"Sale:P00001:bambam", "object":"Sale:bambam:P00001", "depth":2}]}', b'{"entities":[{"iri":"P00002", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"},{"iri":"fred", "entity":"vertice","type": "MALE","age": "47"}]", triplets":[{"predicate":"P00002", "subject":"Sale:P00002:fred", "object":"Sale:fred:P00002", "depth":0},{"predicate":"Sale:P00002:fred", "subject":"P00002", "object":"fred", "depth":1},{"predicate":"fred", "subject":"Sale:fred:P00002", "object":"Sale:P00002:fred", "depth":2}]}', b'{"entities":[{"iri":"P00002", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"},{"iri":"fred", "entity":"vertice","type": "MALE","age": "47"}]", triplets":[{"predicate":"P00002", "subject":"Sale:P00002:fred", "object":"Sale:fred:P00002", "depth":0},{"predicate":"Sale:P00002:fred", "subject":"P00002", "object":"fred", "depth":1},{"predicate":"fred", "subject":"Sale:fred:P00002", "object":"Sale:P00002:fred", "depth":2}]}', b'{"entities":[{"iri":"P00002", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"},{"iri":"fred", "entity":"vertice","type": "MALE","age": "47"}]", triplets":[{"predicate":"P00002", "subject":"Sale:P00002:fred", "object":"Sale:fred:P00002", "depth":0},{"predicate":"Sale:P00002:fred", "subject":"P00002", "object":"fred", "depth":1},{"predicate":"fred", "subject":"Sale:fred:P00002", "object":"Sale:P00002:fred", "depth":2}]}', b'{"entities":[{"iri":"P00001", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"},{"iri":"bambam", "entity":"vertice","type": "MALE","age": "9","status": "age_check"}]", triplets":[{"predicate":"P00001", "subject":"Sale:P00001:bambam", "object":"Sale:bambam:P00001", "depth":0},{"predicate":"Sale:P00001:bambam", "subject":"P00001", "object":"bambam", "depth":1},{"predicate":"bambam", "subject":"Sale:bambam:P00001", "object":"Sale:P00001:bambam", "depth":2}]}', b'{"entities":[{"iri":"bambam", "entity":"vertice","type": "MALE","age": "9","status": "age_check"},{"iri":"P00001", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"}]", triplets":[{"predicate":"bambam", "subject":"Sale:bambam:P00001", "object":"Sale:P00001:bambam", "depth":0},{"predicate":"Sale:bambam:P00001", "subject":"bambam", "object":"P00001", "depth":1},{"predicate":"P00001", "subject":"Sale:P00001:bambam", "object":"Sale:bambam:P00001", "depth":2}]}', b'{"entities":[{"iri":"P00001", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"},{"iri":"bambam", "entity":"vertice","type": "MALE","age": "9","status": "age_check"}]", triplets":[{"predicate":"P00001", "subject":"Sale:P00001:bambam", "object":"Sale:bambam:P00001", "depth":0},{"predicate":"Sale:P00001:bambam", "subject":"P00001", "object":"bambam", "depth":1},{"predicate":"bambam", "subject":"Sale:bambam:P00001", "object":"Sale:P00001:bambam", "depth":2}]}', b'{"entities":[{"iri":"bambam", "entity":"vertice","type": "MALE","age": "9","status": "age_check"},{"iri":"P00001", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"}]", triplets":[{"predicate":"bambam", "subject":"Sale:bambam:P00001", "object":"Sale:P00001:bambam", "depth":0},{"predicate":"Sale:bambam:P00001", "subject":"bambam", "object":"P00001", "depth":1},{"predicate":"P00001", "subject":"Sale:P00001:bambam", "object":"Sale:bambam:P00001", "depth":2}]}', b'{"entities":[{"iri":"P00002", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"},{"iri":"fred", "entity":"vertice","type": "MALE","age": "47"}]", triplets":[{"predicate":"P00002", "subject":"Sale:P00002:fred", "object":"Sale:fred:P00002", "depth":0},{"predicate":"Sale:P00002:fred", "subject":"P00002", "object":"fred", "depth":1},{"predicate":"fred", "subject":"Sale:fred:P00002", "object":"Sale:P00002:fred", "depth":2}]}', b'{"entities":[{"iri":"P00002", "entity":"vertice","type": "Sale","item": "amstel","category": "beer","status": "age_check"},{"iri":"fred", "entity":"vertice","type": "MALE","age": "47"}]", triplets":[{"predicate":"P00002", "subject":"Sale:P00002:fred", "object":"Sale:fred:P00002", "depth":0},{"predicate":"Sale:P00002:fred", "subject":"P00002", "object":"fred", "depth":1},{"predicate":"fred", "subject":"Sale:fred:P00002", "object":"Sale:P00002:fred", "depth":2}]}']},
        {"step": "verify rules", "node": data, "command": "RULE.LIST", "expects": [b'name', b'age_restriction', b'rule', b' type Sale , HAS Sale INOUT age 21 , LT . . status age_check , PROPERTY rpush agecheck , @graph , REDIS . .', b'no of applies', 18, b'no of skips', 16, b'no of hits', 10, b'no of misses', 8]},
    ] 
    matcher.play(scenario)

#
# This test verifies the operation of rules with traversals
#
# The rule:
# * Buyers under 21 are prohited to be alcoholic beverages
# 
# The rule works on sales orders
#    The purchased product is tested for alcohol, using a traverse from the Sale to the Product and Back.
#    Since the product may be on many orders we AND the result with our working set to limit our scope to modified keys only.
#
#    An age check is performed on the buyer, using a traverse from the Sale to the Buyer and Back.
#    Since the buyer may have multiple sales , the any orders we AND the result with our working set to limit our scope to modified keys only.
#

def SD_103_Business_Rules_and_or_Triggers_with_Traversal(cluster_id, controller, data, index):
    matcher = Matcher("SD_103_Business_Rules_and_or_Triggers")
    
    scenario = [
        {"step": "DATA NO KEYS", "node": data, "command": "keys *", "expects": []},
        {"step": "INDEX NO KEYS", "node": index, "command": "keys *", "expects": []},
        {"step": "NO RULES", "node": data, "command": "RULE.LIST", "expects": b'No rules defined'},
        {"step": "check empty queue", "node": data, "command": "LRANGE agecheck 0 1000", "expects": []},
        {"step": "get test data", "node": data, "command": "g.wget https://roxoft.dev/assets/bedrock1.txt", "expects": b'bedrock1.txt'},
        {"step": "add rule age_restriction", "node": data, "command": "RULE.SET age_restriction (has(type,Sale).in(Buyer).lt(age,21)).property(verification,age).redis(rpush, agecheck, @key)", "expects": b'Rule for: age_restriction Expression: Expression appears to be incorrect!'},        
        {"step":"add rule", "node": data, "command": "RULE.SET age_restriction has(type,sale).as(workset).(in(Item).has(type,beer).out(Item).use(workset) & ) " 
                          ".(hasnot(verification,age).in(Buyer).hasnot(verification,age).LT(age,21).property(verification,age).out(Buyer).use(workset) &)"   
                          ".as(breach).redis(rpush,kettle2,@graph).drop().reset().use(breach))", 
                    "expects": b'Rule for: age_restriction Expression: Expression appears to be incorrect!'},
        {"step": "add Persona", "node": data, "command": "G AddV(bambam,MALE).property(age,9).AddV(fred,MALE).property(age, 47).AddV(barney,MALE).property(age, 44)",          "expects": [b'key', b'barney', b'score', b'1', b'value', b'type', b'MALE', b'age', b'44']},
        {"step": "link father/son","node": data, "command": "RXQUERY G:predicate(father_of).subject(barney).object(bambam).predicate(son_of).subject(bambam).object(barney)", "expects":                           [b'key', b'son_of:bambam:barney', b'score', b'1', b'value', b'type', b'son_of', b'half', b'son_of:bambam:barney', b'edge', b'son_of:barney:bambam', b'key', b'son_of:bambam:father_of:bambam:barney', b'score', b'1', b'value', b'type', b'son_of', b'half', b'son_of:bambam:father_of:bambam:barney', b'edge', b'son_of:father_of:bambam:barney:bambam', b'key', b'son_of:bambam:father_of:barney:bambam', b'score', b'1', b'value', b'type', b'son_of', b'half', b'son_of:bambam:father_of:barney:bambam', b'edge', b'son_of:father_of:barney:bambam:bambam', b'key', b'son_of:barney:bambam', b'score', b'1', b'value', b'type', b'son_of', b'half', b'son_of:bambam:barney', b'edge', b'son_of:barney:bambam', b'key', b'son_of:father_of:bambam:barney:bambam', b'score', b'1', b'value', b'type', b'son_of', b'half', b'son_of:bambam:father_of:bambam:barney', b'edge', b'son_of:father_of:bambam:barney:bambam', b'key', b'son_of:father_of:barney:bambam:bambam', b'score', b'1', b'value', b'type', b'son_of', b'half', b'son_of:bambam:father_of:barney:bambam', b'edge', b'son_of:father_of:barney:bambam:bambam']},     
        {"step": "add products","node": data, "command": "RXQUERY G:AddV(BottledWater,nonalcoholic).AddV(sevenUp,nonalcoholic).AddV(RedBull,sports).AddV(Amstel,beer)", "expects":                            [b'key', b'Amstel', b'score', b'1', b'value', b'type', b'beer']},         
        {"step": "reset rule counters", "node": data, "command": "RULE.RESET",  "expects": b'Ok'},
        {"step": "trim queue", "node": data, "command": "LTRIM  agecheck 0 1000",  "expects": b'OK'},
        {"step": "trim queue", "node": data, "command": "LTRIM  kettle2 0 1000",  "expects": b'OK'},
        {"step": "add purchase 0.0","node": data, "command": "RXQUERY G:AddV(P00000,Sale).predicate(Buyer).subject(bambam).object(P00000)", "expects":                            [[b'key', b'Buyer:P00000:bambam', b'score', b'1', b'value', [b'type', b'Buyer', b'half', b'Buyer:bambam:P00000', b'edge', b'Buyer:P00000:bambam']], [b'key', b'Buyer:bambam:P00000', b'score', b'1', b'value', [b'type', b'Buyer', b'half', b'Buyer:bambam:P00000', b'edge', b'Buyer:P00000:bambam']]]},         
        {"step": "add purchase 0.1","node": data, "command": "RXQUERY G:predicate(Item).subject(Amstel).object(P00000)", "expects":                           [b'key', b'Item:Amstel:P00000', b'score', b'1', b'value', b'type', b'Item', b'half', b'Item:Amstel:P00000', b'edge', b'Item:P00000:Amstel', b'key', b'Item:P00000:Amstel', b'score', b'1', b'value', b'type', b'Item', b'half', b'Item:Amstel:P00000', b'edge', b'Item:P00000:Amstel']},         
        {"step": "add purchase 0.2","node": data, "command": "RXQUERY G:predicate(Item).subject(BottledWater).object(P00000)", "expects":                           [[b'key', b'Item:BottledWater:P00000', b'score', b'1', b'value', [b'type', b'Item', b'half', b'Item:BottledWater:P00000', b'edge', b'Item:P00000:BottledWater']], [b'key', b'Item:P00000:BottledWater', b'score', b'1', b'value', [b'type', b'Item', b'half', b'Item:BottledWater:P00000', b'edge', b'Item:P00000:BottledWater']]]},         
        {"step": "add purchase 1.0","node": data, "command": "RXQUERY G:AddV(P00001,Sale).predicate(Buyer).subject(bambam).object(P00001)", "expects":                            [[b'key', b'Buyer:P00001:bambam', b'score', b'1', b'value', [b'type', b'Buyer', b'half', b'Buyer:bambam:P00001', b'edge', b'Buyer:P00001:bambam']], [b'key', b'Buyer:bambam:P00001', b'score', b'1', b'value', [b'type', b'Buyer', b'half', b'Buyer:bambam:P00001', b'edge', b'Buyer:P00001:bambam']]]},         
        {"step": "add purchase 1.1","node": data, "command": "RXQUERY G:predicate(Item).subject(Amstel).object(P00001)", "expects":                            [[b'key', b'Item:Amstel:P00001', b'score', b'1', b'value', [b'type', b'Item', b'half', b'Item:Amstel:P00001', b'edge', b'Item:P00001:Amstel']], [b'key', b'Item:P00001:Amstel', b'score', b'1', b'value', [b'type', b'Item', b'half', b'Item:Amstel:P00001', b'edge', b'Item:P00001:Amstel']]]},         
        {"step": "add purchase 1.2","node": data, "command": "RXQUERY G:predicate(Item).subject(BottledWater).object(P00001)", "expects":                              [[b'key', b'Item:BottledWater:P00001', b'score', b'1', b'value', [b'type', b'Item', b'half', b'Item:BottledWater:P00001', b'edge', b'Item:P00001:BottledWater']], [b'key', b'Item:P00001:BottledWater', b'score', b'1', b'value', [b'type', b'Item', b'half', b'Item:BottledWater:P00001', b'edge', b'Item:P00001:BottledWater']]]},         
        {"step": "add purchase 2.0","node": data, "command": "RXQUERY G:AddV(P00002,Sale).predicate(Buyer).subject(fred).object(P00002)", "expects":    [[b'key', b'Buyer:P00002:fred', b'score', b'1', b'value', [b'type', b'Buyer', b'half', b'Buyer:fred:P00002', b'edge', b'Buyer:P00002:fred']], [b'key', b'Buyer:fred:P00002', b'score', b'1', b'value', [b'type', b'Buyer', b'half', b'Buyer:fred:P00002', b'edge', b'Buyer:P00002:fred']]], "strip": [b'value',b'score', b'type']}, 
        {"step": "add purchase 2.1","node": data, "command": "RXQUERY G:predicate(Item).subject(Amstel).object(P00002)", "expects":                     [[b'key', b'Item:Amstel:P00002', b'score', b'1', b'value', [b'type', b'Item', b'half', b'Item:Amstel:P00002', b'edge', b'Item:P00002:Amstel']], [b'key', b'Item:P00002:Amstel', b'score', b'1', b'value', [b'type', b'Item', b'half', b'Item:Amstel:P00002', b'edge', b'Item:P00002:Amstel']]], "strip": [b'value',b'score', b'type']},         
        {"step": "add purchase 2.2","node": data, "command": "RXQUERY G:predicate(Item).subject(RedBull).object(P00002)", "expects":                    [[b'key', b'Item:P00002:RedBull', b'score', b'1', b'value', [b'type', b'Item', b'half', b'Item:RedBull:P00002', b'edge', b'Item:P00002:RedBull']], [b'key', b'Item:RedBull:P00002', b'score', b'1', b'value', [b'type', b'Item', b'half', b'Item:RedBull:P00002', b'edge', b'Item:P00002:RedBull']]], "strip": [b'value',b'score', b'type']}, 
        {"step": "backup data", "node": data, "command": "BGSAVE", "expects": True},        
        {"step": "wait indexing completed", "node": data, "command": "rxIndex wait", "expects": b'OK'},
        {"step": "wait indexing completed", "node": data, "command": "rxIndex wait", "expects": b'OK'},
        {"step": "DATA KEYS", "node": data, "command": "keys *", "expects": [b'^father_of:barney:bambam', b'~Buyer', b'^Item:BottledWater:P00001', b'^Item:P00001:BottledWater', b'Amstel', b'Item:P00001:BottledWater', b'agecheck', b'^Buyer:bambam:P00000', b'^son_of:bambam:father_of:barney:bambam', b'^son_of:father_of:barney:bambam:bambam', b'Item:P00000:BottledWater', b'~Item', b'Buyer:bambam:P00000', b'barney', b'Item:P00002:RedBull', b'^Item:P00000:BottledWater', b'son_of:bambam:father_of:barney:bambam', b'Item:P00000:Amstel', b'Buyer:fred:P00002', b'^Item:BottledWater:P00000', b'fred', b'^Buyer:P00000:bambam', b'^P00000', b'^Item:P00002:RedBull', b'RedBull', b'^fred', b'Item:BottledWater:P00000', b'^bambam', b'^P00001', b'^Buyer:P00001:bambam', b'^Item:P00000:Amstel', b'Item:P00002:Amstel', b'Item:Amstel:P00000', b'son_of:father_of:bambam:barney:bambam', b'P00000', b'^son_of:father_of:bambam:barney:bambam', b'`sports', b'^Item:RedBull:P00002', b'^son_of:bambam:barney', b'^Item:Amstel:P00001', b'^Buyer:P00002:fred', b'son_of:father_of:barney:bambam:bambam', b'^Buyer:fred:P00002', b'^Item:Amstel:P00002', b'`nonalcoholic', b'`beer', b'^RedBull', b'Buyer:bambam:P00001', b'bambam', b'Buyer:P00002:fred', b'Buyer:P00000:bambam', b'son_of:bambam:barney', b'P00002', b'sevenUp', b'Buyer:P00001:bambam', b'BottledWater', b'^Amstel', b'^Buyer:bambam:P00001', b'^son_of:bambam:father_of:bambam:barney', b'`Sale', b'son_of:barney:bambam', b'~son_of', b'`MALE', b'^barney', b'^son_of:barney:bambam', b'~father_of', b'^P00002', b'^Item:P00002:Amstel', b'Item:P00001:Amstel', b'son_of:bambam:father_of:bambam:barney', b'Item:RedBull:P00002', b'Item:BottledWater:P00001', b'^father_of:bambam:barney', b'^BottledWater', b'Item:Amstel:P00001', b'P00001', b'Item:Amstel:P00002', b'father_of:barney:bambam', b'^Item:P00001:Amstel', b'^Item:Amstel:P00000', b'father_of:bambam:barney']},
        {"step": "INDEX KEYS", "node": index, "command": "keys *", "expects": [b'_ox_:Item:P00001:Amstel', b'_ox_:Buyer:P00001:bambam', b'_ox_:son_of:bambam:barney', b'_zx_:47:AGE', b'_ox_:fred', b'_ox_:son_of:father_of:barney:bambam:bambam', b'_ox_:BottledWater', b'_zx_:SPORTS:TYPE', b'_zx_:P00000:BUYER', b'_ox_:Buyer:fred:P00002', b'_zx_:AMSTEL:ITEM', b'_ox_:father_of:barney:bambam', b'_ox_:Buyer:P00002:fred', b'_ox_:sevenUp', b'_zx_:P00001:BUYER', b'_ox_:P00001', b'_ox_:Item:P00002:RedBull', b'_ox_:Item:Amstel:P00002', b'_zx_:P00002:ITEM', b'_ox_:Item:P00001:BottledWater', b'_zx_:FATHER_OF:SON_OF', b'_zx_:NONALCOHOLIC:TYPE', b'_zx_:BOTTLEDWATER:ITEM', b'_ox_:bambam', b'_ox_:RedBull', b'_ox_:Item:BottledWater:P00001', b'_ox_:Buyer:bambam:P00000', b'_zx_:BAMBAM:BUYER', b'_ox_:P00002', b'_ox_:Item:BottledWater:P00000', b'_ox_:son_of:bambam:father_of:bambam:barney', b'_ox_:son_of:barney:bambam', b'_zx_:P00000:ITEM', b'_ox_:father_of:bambam:barney', b'_ox_:Amstel', b'_zx_:SALE:TYPE', b'_ox_:barney', b'_zx_:BARNEY:SON_OF', b'_ox_:P00000', b'_zx_:MALE:TYPE', b'_ox_:Buyer:bambam:P00001', b'_ox_:son_of:bambam:father_of:barney:bambam', b'_ox_:Item:Amstel:P00001', b'_ox_:Item:Amstel:P00000', b'_zx_:REDBULL:ITEM', b'_ox_:Buyer:P00000:bambam', b'_zx_:BAMBAM:SON_OF', b'_ox_:Item:P00002:Amstel', b'_zx_:BARNEY:FATHER_OF', b'_zx_:P00002:BUYER', b'_zx_:age_restriction:RULE', b'_ox_:Item:P00000:BottledWater', b'_zx_:44:AGE', b'_ox_:Item:RedBull:P00002', b'_ox_:son_of:father_of:bambam:barney:bambam', b'_zx_:FRED:BUYER', b'_zx_:9:AGE', b'_zx_:P00001:ITEM', b'_zx_:BAMBAM:FATHER_OF', b'_zx_:BEER:TYPE', b'_ox_:Item:P00000:Amstel']},
        {"step": "verify fred", "node": data, "command": "HGETALL fred", "expects": [b'type', b'MALE', b'age', b'47']},
        {"step": "verify bambam", "node": data, "command": "HGETALL bambam", "expects": [b'type', b'MALE', b'age', b'9', b'verification', b'age']},
        {"step": "check queue", "node": data, "command": "LRANGE agecheck 0 1000", "expects": [b'P00000', b'bambam', b'P00001', b'P00002']},
        {"step": "verify rules", "node": data, "command": "RULE.LIST", "expects": [[b'name', b'age_restriction', b'rule', b' type Sale , HAS Buyer IN age 21 , LT . . verification age , PROPERTY rpush agecheck , @graph , REDIS . .', b'no of applies', 42, b'no of skips', 66, b'no of hits', 15, b'no of misses', 27]]},
        {"step": "validate age check", "node": data, "command": "G v().has(verification,age)", "expects":  [[b'key', b'P00000', b'score', b'1', b'value', [b'type', b'Sale', b'verification', b'age']], [b'key', b'P00001', b'score', b'1', b'value', [b'type', b'Sale', b'verification', b'age']], [b'key', b'P00002', b'score', b'1', b'value', [b'type', b'Sale', b'verification', b'age']], [b'key', b'bambam', b'score', b'1', b'value', [b'type', b'MALE', b'age', b'9', b'verification', b'age']]]},
        {"step": "rule list", "node": data, "command": "RULE.LIST", "expects":        [[b'name', b'age_restriction', b'rule', b' type Sale , HAS Buyer IN age 21 , LT . . verification age , PROPERTY rpush agecheck , @graph , REDIS . .', b'no of applies', 42, b'no of skips', 66, b'no of hits', 15, b'no of misses', 27]]},
    ] 
    matcher.play(scenario)
